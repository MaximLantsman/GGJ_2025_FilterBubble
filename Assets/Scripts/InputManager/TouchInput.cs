//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""TouchMap"",
            ""id"": ""acab2e00-2bc6-4b5d-bfb3-ef6da7a32468"",
            ""actions"": [
                {
                    ""name"": ""Touched"",
                    ""type"": ""Button"",
                    ""id"": ""6c9e44af-f6b1-457d-9e77-e5ed93ad1785"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touched Position"",
                    ""type"": ""Value"",
                    ""id"": ""d421c4e6-4c36-42f8-9546-7a45515bc847"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63725594-4371-4909-96b6-44e45fbc1398"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9d8cf1-70f0-4c9c-9246-8a3bc545b7fa"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""900c7ea9-aed7-4c2e-89f3-c4b06378b805"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af6651fe-c98f-4bc4-be93-43501edd2441"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touched Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchMap
        m_TouchMap = asset.FindActionMap("TouchMap", throwIfNotFound: true);
        m_TouchMap_Touched = m_TouchMap.FindAction("Touched", throwIfNotFound: true);
        m_TouchMap_TouchedPosition = m_TouchMap.FindAction("Touched Position", throwIfNotFound: true);
    }

    ~@TouchInput()
    {
        UnityEngine.Debug.Assert(!m_TouchMap.enabled, "This will cause a leak and performance issues, TouchInput.TouchMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchMap
    private readonly InputActionMap m_TouchMap;
    private List<ITouchMapActions> m_TouchMapActionsCallbackInterfaces = new List<ITouchMapActions>();
    private readonly InputAction m_TouchMap_Touched;
    private readonly InputAction m_TouchMap_TouchedPosition;
    public struct TouchMapActions
    {
        private @TouchInput m_Wrapper;
        public TouchMapActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touched => m_Wrapper.m_TouchMap_Touched;
        public InputAction @TouchedPosition => m_Wrapper.m_TouchMap_TouchedPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMapActions set) { return set.Get(); }
        public void AddCallbacks(ITouchMapActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Add(instance);
            @Touched.started += instance.OnTouched;
            @Touched.performed += instance.OnTouched;
            @Touched.canceled += instance.OnTouched;
            @TouchedPosition.started += instance.OnTouchedPosition;
            @TouchedPosition.performed += instance.OnTouchedPosition;
            @TouchedPosition.canceled += instance.OnTouchedPosition;
        }

        private void UnregisterCallbacks(ITouchMapActions instance)
        {
            @Touched.started -= instance.OnTouched;
            @Touched.performed -= instance.OnTouched;
            @Touched.canceled -= instance.OnTouched;
            @TouchedPosition.started -= instance.OnTouchedPosition;
            @TouchedPosition.performed -= instance.OnTouchedPosition;
            @TouchedPosition.canceled -= instance.OnTouchedPosition;
        }

        public void RemoveCallbacks(ITouchMapActions instance)
        {
            if (m_Wrapper.m_TouchMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchMapActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchMapActions @TouchMap => new TouchMapActions(this);
    public interface ITouchMapActions
    {
        void OnTouched(InputAction.CallbackContext context);
        void OnTouchedPosition(InputAction.CallbackContext context);
    }
}
